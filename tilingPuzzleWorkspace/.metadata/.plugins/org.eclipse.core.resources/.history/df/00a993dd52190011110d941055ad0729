package algorithm.dancinglinks;

import java.util.ArrayList;

import puzzle.Tile;

public class DancingLinksImpl
{

	public static void initializeTop(DataObject header, int colSize, ArrayList<DataObject> topPointerList )
	{
		
		DataObject current = header;
		int len = colSize;
		int name = 0;
		
		for(int j=0; j < len; ++j)
		{
			DataObject tmp = new DataObject(Integer.toString(name));			
			name += 1;
			
			current.right = tmp;
			tmp.left = current;
			current = tmp;
			
		/*	tmp.down = tmp;
			tmp.up = tmp;
		*/	
			if(j+1 >= len)
			{
				tmp.right = header;
				header.left = tmp;
			}	
			
			topPointerList.add(j, tmp);
		}								
	}
	
	public static void rightPrint(DataObject header) 
	{
		
		DataObject tmp = header.right;
		System.out.println("forward print");
		while(tmp != header)
		{
			System.out.print(tmp.name +" ");
			tmp = tmp.right;
		}
		System.out.println();
	}
	
	public static void leftPrint(DataObject header) 
	{
		System.out.println("reverse print");
		DataObject tmp = header.left;
		while(tmp != header)
		{
			System.out.print(tmp.name+ " ");
			tmp = tmp.left;
		}
		System.out.println();
	}

	public static void initializeGrid(ArrayList<Tile> tileList, Tile board) 
	{
		/*TODO: This algorithm is naive - brute-force 
		*/
		
		int nRows = board.getyDimension();
		int nCols = board.getxDimension();
		int i,j,k,l, lcv1, lcv2;	//loop-control variables
		
		for(Tile tile : tileList)
		{
			int xDim = tile.getxDimension();
			int yDim = tile.getyDimension();
			for(lcv1 = board.getStartingCell().getI(); lcv1 < (nRows - yDim) ; lcv1++)
			{
				
				for(lcv2= board.getStartingCell().getJ(); lcv2 < (nCols - xDim) ; lcv2++)
				{
					
					for(i= lcv1, k= lcv1; i<nRows && k < yDim; i++,k++ )
					{
						for(j = lcv2, l = lcv2; j<nCols && l < xDim; j++, l++)
						{
							
						}
						
					}
					
				}
				
			}
		}
		
	}
	
}
