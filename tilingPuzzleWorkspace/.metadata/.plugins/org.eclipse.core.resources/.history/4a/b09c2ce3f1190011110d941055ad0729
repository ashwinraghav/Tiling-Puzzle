package algorithm.dancinglinks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import puzzle.Domino;
import puzzle.Tile;

public class DancingLinksImpl
{

	public static void initializeTop(DataObject header, int colSize, ArrayList<DataObject> topPointerList )
	{
		
		DataObject current = header;
		int len = colSize;
		int name = 0;
		
		for(int j=0; j < len; ++j)
		{
			DataObject tmp = new DataObject(Integer.toString(name));			
			name += 1;
			
			current.right = tmp;
			tmp.left = current;
			current = tmp;
			
		/*	tmp.down = tmp;
			tmp.up = tmp;
		*/	
			if(j+1 >= len)
			{
				tmp.right = header;
				header.left = tmp;
			}	
			
			topPointerList.add(j, tmp);
		}								
	}
	
	public static void rightPrint(DataObject header) 
	{
		
		DataObject tmp = header.right;
		System.out.println("forward print");
		while(tmp != header)
		{
			System.out.print(tmp.name +" ");
			tmp = tmp.right;
		}
		System.out.println();
	}
	
	public static void leftPrint(DataObject header) 
	{
		System.out.println("reverse print");
		DataObject tmp = header.left;
		while(tmp != header)
		{
			System.out.print(tmp.name+ " ");
			tmp = tmp.left;
		}
		System.out.println();
	}

	
	public static HashMap< Tile, ArrayList<ArrayList<Integer>> > initializeGrid(ArrayList<Tile> tileList, Tile board, Domino[][] matrix ) 
	{
		/*TODO: This algorithm is naive - brute-force 
		*/
		
		int nRows = board.getyDimension();
		int nCols = board.getxDimension();
		int i,j,k,l, lcv1, lcv2;	//loop-control variables
		
		HashMap < Tile, ArrayList<ArrayList<Integer>> > mapping = new HashMap<Tile, ArrayList<ArrayList<Integer>>>();		
		 
		
		for(Tile tile : tileList)
		{
			boolean flag = true;
			int xDim = tile.getxDimension();
			int yDim = tile.getyDimension();
			int boardStartI = board.getStartingCell().getI();
			int boardStartJ = board.getStartingCell().getJ();
			int tileStartI = tile.getStartingCell().getI();
			int tileStartJ = tile.getStartingCell().getJ();
			
			ArrayList<ArrayList<Integer>> collection = new ArrayList<ArrayList<Integer>>();
			
			for(lcv1 = boardStartI; lcv1 <= (nRows - yDim) + boardStartI ; lcv1++)
			{
				
				for(lcv2= boardStartJ; lcv2 <= (nCols - xDim) + boardStartJ ; lcv2++)
				{
					ArrayList<Integer> columnId = new ArrayList<Integer>(xDim*yDim); 
					
					for(i= lcv1, k= tileStartI; i<nRows + boardStartI && k < yDim + tileStartI && flag == true; i++,k++ )
					{
						for(j = lcv2, l = tileStartJ; j<nCols + boardStartJ && l < xDim + tileStartJ && flag == true; j++, l++)
						{
							
							if(matrix[k][l] == null)	//empty cell
								continue;	
				
							if(matrix[k][l].equals(matrix[i][j]))
							{
								//get ColumnId
								columnId.add(new Integer(matrix[i][j].getId()));
								continue;
							}
							
							flag = false;
							
						}
						
					}
					
					if(flag == true)
					{
						//Do book-marking saying this tile covers this-all columns
						//RIGHT NOW; I am just printing
		/*				System.out.println("Tile" + tile.getId() + "covers columns");
						for(int lcv : columnId)
						{
							System.out.print(lcv + " ");
						}
						System.out.println("");												
		*/			
						collection.add(columnId);
					}
					
					flag = true;
				}
				
			}
			mapping.put(tile, collection);
		}
		return mapping;
	}

	public static void initializeGrid(
			HashMap<Tile, ArrayList<ArrayList<Integer>>> mapping, ArrayList<DataObject> topPointerList) 
	{
		
		Set<Tile> tileSet = mapping.keySet();
		for(Tile tile : tileSet)
		{
			ArrayList<ArrayList<Integer>> colIdList = mapping.get(tile);	//the list of all columns I can cover
			for(ArrayList<Integer> colIds : colIdList)	// one such column
			{
				
				
								
				
			}
			
		}
		
		
	}
	
}
